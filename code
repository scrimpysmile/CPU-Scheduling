# here u can get the ready queue !! 
from itertools import count
from posixpath import split
import string
from time import time 
 # must be the last instrction in the whole script 
#PR functions
def turn_round():
    sum=0
    idle=0
    ta=[]
    temp=0
    notready_queu=ready_queue()
    for i in range(len(notready_queu)):
        idle = 0
        for j in range(len(notready_queu)):
            x=notready_queu[j].split()
            if x[0]=='proc' or x[0] =='idle':
                if int(x[1]) == i or x[0] =='idle':
                    if x[0]=='proc':
                        sum = sum + (int (x[2])-idle)
                        ta.append(sum)
                        sum = sum + idle
                    elif x[0]=='idle':
                        idle = idle + int(x[1])
    for i in range(len(ta)):
        temp = temp + ta[i]
    return (temp/4)            

def response():
    sum=0
    idle=0
    ta=[]
    temp=0
    notready_queu=ready_queue()
    for i in range(len(notready_queu)):
        idle = 0
        for j in range(len(notready_queu)):   
            x=notready_queu[j].split()
            if x[0]=='proc' or x[0] =='idle':
                if int(x[1]) == i or x[0] =='idle':
                    if x[0]=='proc':
                        ta.append(sum)
                        sum = sum + (int (x[2])-idle)
                    elif x[0]=='idle':
                        idle = idle + int(x[1])
    for i in range(len(ta)):
        temp = temp + ta[i]
    return (temp/4)

def cpu_timline_pr():
    sum=0
    idle=0
    ta=[]
    temp='A'
    c = 0
    ta.append(0)
    proc=[]
    char=[]
    notready_queu=ready_queue()
    for i in range(len(notready_queu)):
        y=notready_queu[i].split()
        if y[0]=='proc':
            y.append(chr(ord(temp) + c))
            c=c+1
        proc.append(y)
    
    for i in range(len(notready_queu)):
        idle = 0
        for j in range(len(notready_queu)):
            x=proc[j]
            if x[0]=='proc' or x[0] =='idle':
                if int(x[1]) == i or x[0] =='idle':
                    if x[0]=='proc':
                        sum = sum + (int (x[2]))
                        ta.append(sum)
                        char.append(x[3])
                    elif x[0]=='idle':
                        idle = idle + int(x[1])
    for i in range(len(ta)-1):
        print("PROC %c (%d -> %d)" %(char[i],ta[i],ta[i+1]))
        

def ready_queue():
    file=open(file_name,"r")
    data=file.read()
    ready_queue=data.split('\n')
    return(ready_queue)
def total_burst(y):    
    x=y.split()
    total=0
    if y == '' or y=='Done':
        return 0
    if x[0]=='idle':
        return int(x[1])
    if x[0] != 'idle' or x[0] != 'Done' or x[0] != '' :
            total = total + int(x[2])
    return total

#RR functions

def response_timeRR(fturn,arrival):
    queu=ready_queue()
    time_res=[]
    ###setting up a T-response list ########
    for i in range(len(fturn)): 
        time_res.append(0)
    ########################################
    n=0
    while n != len(fturn):
        if queu[n][0:4] == 'idle':
            time_res[n]=fturn[(n+1)]-arrival[n]
            n=n+2
        else:
            time_res[n]=fturn[n]-arrival[n]
            n=n+1
    ava=sum(time_res)/(len(arrival)-1)
    return ava
def turnaround_timeRR(time_com):
    queu=ready_queue()
    time_arr=[]
    burts=[]
    all_burts=[]
    counter=0
    ######################################################
    for i in range(len(queu)):
        if queu[i][0:4] == 'proc':
            burts.append(total_burst(queu[i]))
            all_burts.append(total_burst(queu[i]))
        elif queu[i] != 'Done' :
             all_burts.append(total_burst(queu[i])) 
    ##################################################### 

     #setting up time arrival list for turnaround time :
    for i in range(len(all_burts)): 
        time_arr.append(0)
    #### size of turnround without idle #######
    for i in range(len(queu)):
         if queu[i][0:4] == 'idle' or queu[i][0:4] == 'Done' :
             counter=counter+1
    time_round=[]
    for i in range(len(queu)-1):
        time_round.append(0)         
    #####################################          
    for i in range(len(queu)):
        if queu[i][0:4]=='idle':
            time_arr[i]=all_burts[i]
    #####################################
    i=0
    while i != len(time_com):
        if time_com[i]==-1:
            time_round[i+1]=time_com[(i+1)]-time_arr[i]
            i=i+2
        else :
            time_round[i]=time_com[i]
            i=i+1
    ava=(sum(time_round)/len(burts))
    return ava,time_arr
def  timeline_RR(burset_time):
    queu=ready_queue()
    proc_queu=[]
    all_burts=[]
    idel=[]
    for i in range(len(queu)):
        if queu[i][0:4] == 'proc':
            proc_queu.append(queu[i])
    #array of total bursts
    burts=[]
    #array for each proc name 
    alp=list(string.ascii_uppercase)    
    n_proc=[]
    x=queu[0][0:4]
    z=0
    for i in range(len(queu)):
        if queu[i][0:4] == 'proc':
            burts.append(total_burst(queu[i]))
            all_burts.append(total_burst(queu[i]))
            n_proc.append(alp[z])
            z=z+1
        elif queu[i] != 'Done' :
             all_burts.append(total_burst(queu[i]))  
             n_proc.append('/') 
    burts=all_burts
    for i in range(len(queu)):
        if queu[i][0:4]=='idle':
            idel.append(burts[i])
        else:
            idel.append(0)
    v=len(burts)
    n=0
    total=0
    last_stop=0
    time_com=[]
    fturn=[]
    flag1=1
    flag2=1
    flag3=1
    flag4=1
    next_index=0
    index_burset=-2
    #setting up list for fisrt turn time :
    for i in range(len(burts)): 
        fturn.append(-1)
    #setting up time com list for turnaround time :
    for i in range(len(burts)): 
        time_com.append(-1)
    ###############################################
    time_lunch=1
    ###########CPU utilization:#########################
    cpu_u=0
    total_bur_cpu=0
    total_idle_cpu=0
    for i in range(len(burts)):
        if queu[i][0:4]=='proc':
            zx=queu[i][0:4]
            total_bur_cpu=total_bur_cpu+burts[i]
        elif queu[i][0:4]=='idle':
            total_idle_cpu=total_idle_cpu+burts[i]
    cpu_u=total_bur_cpu/(total_bur_cpu+total_idle_cpu)
    ###################################################
    while(n<len(all_burts)):
        if (len(burts)-1) == (burts.count(0)) and flag2==1 and burts[index_burset]!=0 :
            total=time_lunch
            flag2=0
        if queu[n][0:4] == 'idle' and flag1==1:
            index_burset=n+1
            time_lunch=all_burts[n]
            all_burts[n]=0
            flag1=0
            if (n+1)==(len(burts)-1):
                n=0
            else:
                n=n+2
        if time_lunch<=total and flag1==0 and burts[index_burset]!=0 and flag3==1:
            next_index=n
            n=index_burset
            flag3=0
        if queu[n][0:4]=='idle' and time_lunch > total:
            if (n+1)==(len(burts)-1):
                n=0
            else:
                n=n+2
        if burts.count(0) == len(burts) :
            print("\n")
            return time_com,fturn,cpu_u 
        if burts[n] > 0 :
            if (burts[n]-int(burset_time))<0:
                last_stop=total+burts[n]
            else:
                last_stop=total+int(burset_time)
            burts[n]=burts[n]-int(burset_time)
            if burts[n] <= 0:
                if fturn[n] == -1 :
                    fturn[n]=total
                time_com[n]=last_stop
                take=int(burset_time)+burts[n]
                print(f"->proc {n_proc[n]}:{n_proc[n]}({total}->{last_stop})  ,{queu[n]}")
                burts[n]=0
            else:
                if fturn[n] == -1 :
                    fturn[n]=total
                take=int(burset_time)
                print(f"->proc {n_proc[n]}:{n_proc[n]}({total}->{last_stop}) ,{queu[n]}")   
            n=n+1
            total=total+take
        else :
            n=n+1
        if n == v :
            n=0   
        if n==(index_burset+1) and flag4==1 :
            n=next_index
            flag4=0
def waiting_list():
    queu=ready_queue()
    burst=[]
    for i in range(len(queu)):
        burst.append(total_burst(queu[i]))
    for i in range(len(burst)):
        burst[i]=burst[i]
    for i in range(len(burst)):
        print(f"the waiting time for {queu[i]} is : {burst[i]}")
# main \\\ 
file_name=input("input File Name  ")
algo_type=input("CPU Scheduling Alg ")
file=open(file_name,"r")
if algo_type=='RR':
    burst_time=input("quantum : ")
    print("The CPU timeline is : \n")
    time_com,fturn,cpu_u=timeline_RR(burst_time)
    ava_turnround,arrival=turnaround_timeRR(time_com)
    print(f"The Average turn around time is : {ava_turnround} ms \n")
    print(f"The Average response time is : {response_timeRR(fturn,arrival)} ms \n")
    print(f"The CPU utilization : {cpu_u}\n")
if algo_type=='PR':
    print(f"The Average turn around time is : {turn_round()} ms \n")
    print(f"The Average response time is : {response()} ms \n")
    print("The CPU Timeline: ")
    cpu_timline_pr()
file.close() # must be the last instrction in the whole script
 
 
